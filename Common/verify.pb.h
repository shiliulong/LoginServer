// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: verify.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_verify_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_verify_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_verify_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_verify_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_verify_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_verify_2eproto_metadata_getter(int index);
namespace verify {
class GetTokenAck;
struct GetTokenAckDefaultTypeInternal;
extern GetTokenAckDefaultTypeInternal _GetTokenAck_default_instance_;
class GetTokenReq;
struct GetTokenReqDefaultTypeInternal;
extern GetTokenReqDefaultTypeInternal _GetTokenReq_default_instance_;
class LoginAck;
struct LoginAckDefaultTypeInternal;
extern LoginAckDefaultTypeInternal _LoginAck_default_instance_;
class LoginReq;
struct LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class QuitAck;
struct QuitAckDefaultTypeInternal;
extern QuitAckDefaultTypeInternal _QuitAck_default_instance_;
class QuitReq;
struct QuitReqDefaultTypeInternal;
extern QuitReqDefaultTypeInternal _QuitReq_default_instance_;
class RegisterAck;
struct RegisterAckDefaultTypeInternal;
extern RegisterAckDefaultTypeInternal _RegisterAck_default_instance_;
class RegisterReq;
struct RegisterReqDefaultTypeInternal;
extern RegisterReqDefaultTypeInternal _RegisterReq_default_instance_;
class VerifyAck;
struct VerifyAckDefaultTypeInternal;
extern VerifyAckDefaultTypeInternal _VerifyAck_default_instance_;
class VerifyReq;
struct VerifyReqDefaultTypeInternal;
extern VerifyReqDefaultTypeInternal _VerifyReq_default_instance_;
}  // namespace verify
PROTOBUF_NAMESPACE_OPEN
template<> ::verify::GetTokenAck* Arena::CreateMaybeMessage<::verify::GetTokenAck>(Arena*);
template<> ::verify::GetTokenReq* Arena::CreateMaybeMessage<::verify::GetTokenReq>(Arena*);
template<> ::verify::LoginAck* Arena::CreateMaybeMessage<::verify::LoginAck>(Arena*);
template<> ::verify::LoginReq* Arena::CreateMaybeMessage<::verify::LoginReq>(Arena*);
template<> ::verify::QuitAck* Arena::CreateMaybeMessage<::verify::QuitAck>(Arena*);
template<> ::verify::QuitReq* Arena::CreateMaybeMessage<::verify::QuitReq>(Arena*);
template<> ::verify::RegisterAck* Arena::CreateMaybeMessage<::verify::RegisterAck>(Arena*);
template<> ::verify::RegisterReq* Arena::CreateMaybeMessage<::verify::RegisterReq>(Arena*);
template<> ::verify::VerifyAck* Arena::CreateMaybeMessage<::verify::VerifyAck>(Arena*);
template<> ::verify::VerifyReq* Arena::CreateMaybeMessage<::verify::VerifyReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace verify {

// ===================================================================

class RegisterReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:verify.RegisterReq) */ {
 public:
  inline RegisterReq() : RegisterReq(nullptr) {}
  virtual ~RegisterReq();
  explicit constexpr RegisterReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterReq(const RegisterReq& from);
  RegisterReq(RegisterReq&& from) noexcept
    : RegisterReq() {
    *this = ::std::move(from);
  }

  inline RegisterReq& operator=(const RegisterReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterReq& operator=(RegisterReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterReq* internal_default_instance() {
    return reinterpret_cast<const RegisterReq*>(
               &_RegisterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterReq& a, RegisterReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterReq* New() const final {
    return CreateMaybeMessage<RegisterReq>(nullptr);
  }

  RegisterReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterReq& from);
  void MergeFrom(const RegisterReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "verify.RegisterReq";
  }
  protected:
  explicit RegisterReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_verify_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string passwd = 2;
  void clear_passwd();
  const std::string& passwd() const;
  void set_passwd(const std::string& value);
  void set_passwd(std::string&& value);
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  std::string* mutable_passwd();
  std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // @@protoc_insertion_point(class_scope:verify.RegisterReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_verify_2eproto;
};
// -------------------------------------------------------------------

class RegisterAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:verify.RegisterAck) */ {
 public:
  inline RegisterAck() : RegisterAck(nullptr) {}
  virtual ~RegisterAck();
  explicit constexpr RegisterAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterAck(const RegisterAck& from);
  RegisterAck(RegisterAck&& from) noexcept
    : RegisterAck() {
    *this = ::std::move(from);
  }

  inline RegisterAck& operator=(const RegisterAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterAck& operator=(RegisterAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterAck* internal_default_instance() {
    return reinterpret_cast<const RegisterAck*>(
               &_RegisterAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterAck& a, RegisterAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterAck* New() const final {
    return CreateMaybeMessage<RegisterAck>(nullptr);
  }

  RegisterAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterAck& from);
  void MergeFrom(const RegisterAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "verify.RegisterAck";
  }
  protected:
  explicit RegisterAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_verify_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorInfoFieldNumber = 2,
    kIsOkFieldNumber = 1,
  };
  // string error_info = 2;
  void clear_error_info();
  const std::string& error_info() const;
  void set_error_info(const std::string& value);
  void set_error_info(std::string&& value);
  void set_error_info(const char* value);
  void set_error_info(const char* value, size_t size);
  std::string* mutable_error_info();
  std::string* release_error_info();
  void set_allocated_error_info(std::string* error_info);
  private:
  const std::string& _internal_error_info() const;
  void _internal_set_error_info(const std::string& value);
  std::string* _internal_mutable_error_info();
  public:

  // bool is_ok = 1;
  void clear_is_ok();
  bool is_ok() const;
  void set_is_ok(bool value);
  private:
  bool _internal_is_ok() const;
  void _internal_set_is_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:verify.RegisterAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_info_;
  bool is_ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_verify_2eproto;
};
// -------------------------------------------------------------------

class GetTokenReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:verify.GetTokenReq) */ {
 public:
  inline GetTokenReq() : GetTokenReq(nullptr) {}
  virtual ~GetTokenReq();
  explicit constexpr GetTokenReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTokenReq(const GetTokenReq& from);
  GetTokenReq(GetTokenReq&& from) noexcept
    : GetTokenReq() {
    *this = ::std::move(from);
  }

  inline GetTokenReq& operator=(const GetTokenReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTokenReq& operator=(GetTokenReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTokenReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTokenReq* internal_default_instance() {
    return reinterpret_cast<const GetTokenReq*>(
               &_GetTokenReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetTokenReq& a, GetTokenReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTokenReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTokenReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTokenReq* New() const final {
    return CreateMaybeMessage<GetTokenReq>(nullptr);
  }

  GetTokenReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTokenReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTokenReq& from);
  void MergeFrom(const GetTokenReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTokenReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "verify.GetTokenReq";
  }
  protected:
  explicit GetTokenReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_verify_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string passwd = 2;
  void clear_passwd();
  const std::string& passwd() const;
  void set_passwd(const std::string& value);
  void set_passwd(std::string&& value);
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  std::string* mutable_passwd();
  std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // @@protoc_insertion_point(class_scope:verify.GetTokenReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_verify_2eproto;
};
// -------------------------------------------------------------------

class GetTokenAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:verify.GetTokenAck) */ {
 public:
  inline GetTokenAck() : GetTokenAck(nullptr) {}
  virtual ~GetTokenAck();
  explicit constexpr GetTokenAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTokenAck(const GetTokenAck& from);
  GetTokenAck(GetTokenAck&& from) noexcept
    : GetTokenAck() {
    *this = ::std::move(from);
  }

  inline GetTokenAck& operator=(const GetTokenAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTokenAck& operator=(GetTokenAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTokenAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTokenAck* internal_default_instance() {
    return reinterpret_cast<const GetTokenAck*>(
               &_GetTokenAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetTokenAck& a, GetTokenAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTokenAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTokenAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTokenAck* New() const final {
    return CreateMaybeMessage<GetTokenAck>(nullptr);
  }

  GetTokenAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTokenAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTokenAck& from);
  void MergeFrom(const GetTokenAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTokenAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "verify.GetTokenAck";
  }
  protected:
  explicit GetTokenAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_verify_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kIsOkFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // bool is_ok = 1;
  void clear_is_ok();
  bool is_ok() const;
  void set_is_ok(bool value);
  private:
  bool _internal_is_ok() const;
  void _internal_set_is_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:verify.GetTokenAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  bool is_ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_verify_2eproto;
};
// -------------------------------------------------------------------

class LoginReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:verify.LoginReq) */ {
 public:
  inline LoginReq() : LoginReq(nullptr) {}
  virtual ~LoginReq();
  explicit constexpr LoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReq(const LoginReq& from);
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginReq* New() const final {
    return CreateMaybeMessage<LoginReq>(nullptr);
  }

  LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "verify.LoginReq";
  }
  protected:
  explicit LoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_verify_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:verify.LoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_verify_2eproto;
};
// -------------------------------------------------------------------

class LoginAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:verify.LoginAck) */ {
 public:
  inline LoginAck() : LoginAck(nullptr) {}
  virtual ~LoginAck();
  explicit constexpr LoginAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginAck(const LoginAck& from);
  LoginAck(LoginAck&& from) noexcept
    : LoginAck() {
    *this = ::std::move(from);
  }

  inline LoginAck& operator=(const LoginAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginAck& operator=(LoginAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginAck* internal_default_instance() {
    return reinterpret_cast<const LoginAck*>(
               &_LoginAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoginAck& a, LoginAck& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginAck* New() const final {
    return CreateMaybeMessage<LoginAck>(nullptr);
  }

  LoginAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginAck& from);
  void MergeFrom(const LoginAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "verify.LoginAck";
  }
  protected:
  explicit LoginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_verify_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsOkFieldNumber = 1,
  };
  // bool is_ok = 1;
  void clear_is_ok();
  bool is_ok() const;
  void set_is_ok(bool value);
  private:
  bool _internal_is_ok() const;
  void _internal_set_is_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:verify.LoginAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_verify_2eproto;
};
// -------------------------------------------------------------------

class VerifyReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:verify.VerifyReq) */ {
 public:
  inline VerifyReq() : VerifyReq(nullptr) {}
  virtual ~VerifyReq();
  explicit constexpr VerifyReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerifyReq(const VerifyReq& from);
  VerifyReq(VerifyReq&& from) noexcept
    : VerifyReq() {
    *this = ::std::move(from);
  }

  inline VerifyReq& operator=(const VerifyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyReq& operator=(VerifyReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyReq* internal_default_instance() {
    return reinterpret_cast<const VerifyReq*>(
               &_VerifyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VerifyReq& a, VerifyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyReq* New() const final {
    return CreateMaybeMessage<VerifyReq>(nullptr);
  }

  VerifyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyReq& from);
  void MergeFrom(const VerifyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "verify.VerifyReq";
  }
  protected:
  explicit VerifyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_verify_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:verify.VerifyReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_verify_2eproto;
};
// -------------------------------------------------------------------

class VerifyAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:verify.VerifyAck) */ {
 public:
  inline VerifyAck() : VerifyAck(nullptr) {}
  virtual ~VerifyAck();
  explicit constexpr VerifyAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerifyAck(const VerifyAck& from);
  VerifyAck(VerifyAck&& from) noexcept
    : VerifyAck() {
    *this = ::std::move(from);
  }

  inline VerifyAck& operator=(const VerifyAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyAck& operator=(VerifyAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyAck* internal_default_instance() {
    return reinterpret_cast<const VerifyAck*>(
               &_VerifyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(VerifyAck& a, VerifyAck& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyAck* New() const final {
    return CreateMaybeMessage<VerifyAck>(nullptr);
  }

  VerifyAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyAck& from);
  void MergeFrom(const VerifyAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "verify.VerifyAck";
  }
  protected:
  explicit VerifyAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_verify_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kIsOkFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // bool is_ok = 1;
  void clear_is_ok();
  bool is_ok() const;
  void set_is_ok(bool value);
  private:
  bool _internal_is_ok() const;
  void _internal_set_is_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:verify.VerifyAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  bool is_ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_verify_2eproto;
};
// -------------------------------------------------------------------

class QuitReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:verify.QuitReq) */ {
 public:
  inline QuitReq() : QuitReq(nullptr) {}
  virtual ~QuitReq();
  explicit constexpr QuitReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuitReq(const QuitReq& from);
  QuitReq(QuitReq&& from) noexcept
    : QuitReq() {
    *this = ::std::move(from);
  }

  inline QuitReq& operator=(const QuitReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitReq& operator=(QuitReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuitReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuitReq* internal_default_instance() {
    return reinterpret_cast<const QuitReq*>(
               &_QuitReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QuitReq& a, QuitReq& b) {
    a.Swap(&b);
  }
  inline void Swap(QuitReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuitReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuitReq* New() const final {
    return CreateMaybeMessage<QuitReq>(nullptr);
  }

  QuitReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuitReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuitReq& from);
  void MergeFrom(const QuitReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuitReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "verify.QuitReq";
  }
  protected:
  explicit QuitReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_verify_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:verify.QuitReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_verify_2eproto;
};
// -------------------------------------------------------------------

class QuitAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:verify.QuitAck) */ {
 public:
  inline QuitAck() : QuitAck(nullptr) {}
  virtual ~QuitAck();
  explicit constexpr QuitAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuitAck(const QuitAck& from);
  QuitAck(QuitAck&& from) noexcept
    : QuitAck() {
    *this = ::std::move(from);
  }

  inline QuitAck& operator=(const QuitAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitAck& operator=(QuitAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuitAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuitAck* internal_default_instance() {
    return reinterpret_cast<const QuitAck*>(
               &_QuitAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QuitAck& a, QuitAck& b) {
    a.Swap(&b);
  }
  inline void Swap(QuitAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuitAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuitAck* New() const final {
    return CreateMaybeMessage<QuitAck>(nullptr);
  }

  QuitAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuitAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuitAck& from);
  void MergeFrom(const QuitAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuitAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "verify.QuitAck";
  }
  protected:
  explicit QuitAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_verify_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrInfoFieldNumber = 2,
    kIsOkFieldNumber = 1,
  };
  // string err_info = 2;
  void clear_err_info();
  const std::string& err_info() const;
  void set_err_info(const std::string& value);
  void set_err_info(std::string&& value);
  void set_err_info(const char* value);
  void set_err_info(const char* value, size_t size);
  std::string* mutable_err_info();
  std::string* release_err_info();
  void set_allocated_err_info(std::string* err_info);
  private:
  const std::string& _internal_err_info() const;
  void _internal_set_err_info(const std::string& value);
  std::string* _internal_mutable_err_info();
  public:

  // bool is_ok = 1;
  void clear_is_ok();
  bool is_ok() const;
  void set_is_ok(bool value);
  private:
  bool _internal_is_ok() const;
  void _internal_set_is_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:verify.QuitAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_info_;
  bool is_ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_verify_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterReq

// string name = 1;
inline void RegisterReq::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RegisterReq::name() const {
  // @@protoc_insertion_point(field_get:verify.RegisterReq.name)
  return _internal_name();
}
inline void RegisterReq::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:verify.RegisterReq.name)
}
inline std::string* RegisterReq::mutable_name() {
  // @@protoc_insertion_point(field_mutable:verify.RegisterReq.name)
  return _internal_mutable_name();
}
inline const std::string& RegisterReq::_internal_name() const {
  return name_.Get();
}
inline void RegisterReq::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterReq::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:verify.RegisterReq.name)
}
inline void RegisterReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:verify.RegisterReq.name)
}
inline void RegisterReq::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:verify.RegisterReq.name)
}
inline std::string* RegisterReq::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterReq::release_name() {
  // @@protoc_insertion_point(field_release:verify.RegisterReq.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:verify.RegisterReq.name)
}

// string passwd = 2;
inline void RegisterReq::clear_passwd() {
  passwd_.ClearToEmpty();
}
inline const std::string& RegisterReq::passwd() const {
  // @@protoc_insertion_point(field_get:verify.RegisterReq.passwd)
  return _internal_passwd();
}
inline void RegisterReq::set_passwd(const std::string& value) {
  _internal_set_passwd(value);
  // @@protoc_insertion_point(field_set:verify.RegisterReq.passwd)
}
inline std::string* RegisterReq::mutable_passwd() {
  // @@protoc_insertion_point(field_mutable:verify.RegisterReq.passwd)
  return _internal_mutable_passwd();
}
inline const std::string& RegisterReq::_internal_passwd() const {
  return passwd_.Get();
}
inline void RegisterReq::_internal_set_passwd(const std::string& value) {
  
  passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterReq::set_passwd(std::string&& value) {
  
  passwd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:verify.RegisterReq.passwd)
}
inline void RegisterReq::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:verify.RegisterReq.passwd)
}
inline void RegisterReq::set_passwd(const char* value,
    size_t size) {
  
  passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:verify.RegisterReq.passwd)
}
inline std::string* RegisterReq::_internal_mutable_passwd() {
  
  return passwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterReq::release_passwd() {
  // @@protoc_insertion_point(field_release:verify.RegisterReq.passwd)
  return passwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterReq::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:verify.RegisterReq.passwd)
}

// -------------------------------------------------------------------

// RegisterAck

// bool is_ok = 1;
inline void RegisterAck::clear_is_ok() {
  is_ok_ = false;
}
inline bool RegisterAck::_internal_is_ok() const {
  return is_ok_;
}
inline bool RegisterAck::is_ok() const {
  // @@protoc_insertion_point(field_get:verify.RegisterAck.is_ok)
  return _internal_is_ok();
}
inline void RegisterAck::_internal_set_is_ok(bool value) {
  
  is_ok_ = value;
}
inline void RegisterAck::set_is_ok(bool value) {
  _internal_set_is_ok(value);
  // @@protoc_insertion_point(field_set:verify.RegisterAck.is_ok)
}

// string error_info = 2;
inline void RegisterAck::clear_error_info() {
  error_info_.ClearToEmpty();
}
inline const std::string& RegisterAck::error_info() const {
  // @@protoc_insertion_point(field_get:verify.RegisterAck.error_info)
  return _internal_error_info();
}
inline void RegisterAck::set_error_info(const std::string& value) {
  _internal_set_error_info(value);
  // @@protoc_insertion_point(field_set:verify.RegisterAck.error_info)
}
inline std::string* RegisterAck::mutable_error_info() {
  // @@protoc_insertion_point(field_mutable:verify.RegisterAck.error_info)
  return _internal_mutable_error_info();
}
inline const std::string& RegisterAck::_internal_error_info() const {
  return error_info_.Get();
}
inline void RegisterAck::_internal_set_error_info(const std::string& value) {
  
  error_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterAck::set_error_info(std::string&& value) {
  
  error_info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:verify.RegisterAck.error_info)
}
inline void RegisterAck::set_error_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:verify.RegisterAck.error_info)
}
inline void RegisterAck::set_error_info(const char* value,
    size_t size) {
  
  error_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:verify.RegisterAck.error_info)
}
inline std::string* RegisterAck::_internal_mutable_error_info() {
  
  return error_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterAck::release_error_info() {
  // @@protoc_insertion_point(field_release:verify.RegisterAck.error_info)
  return error_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterAck::set_allocated_error_info(std::string* error_info) {
  if (error_info != nullptr) {
    
  } else {
    
  }
  error_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:verify.RegisterAck.error_info)
}

// -------------------------------------------------------------------

// GetTokenReq

// string name = 1;
inline void GetTokenReq::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetTokenReq::name() const {
  // @@protoc_insertion_point(field_get:verify.GetTokenReq.name)
  return _internal_name();
}
inline void GetTokenReq::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:verify.GetTokenReq.name)
}
inline std::string* GetTokenReq::mutable_name() {
  // @@protoc_insertion_point(field_mutable:verify.GetTokenReq.name)
  return _internal_mutable_name();
}
inline const std::string& GetTokenReq::_internal_name() const {
  return name_.Get();
}
inline void GetTokenReq::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTokenReq::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:verify.GetTokenReq.name)
}
inline void GetTokenReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:verify.GetTokenReq.name)
}
inline void GetTokenReq::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:verify.GetTokenReq.name)
}
inline std::string* GetTokenReq::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTokenReq::release_name() {
  // @@protoc_insertion_point(field_release:verify.GetTokenReq.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTokenReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:verify.GetTokenReq.name)
}

// string passwd = 2;
inline void GetTokenReq::clear_passwd() {
  passwd_.ClearToEmpty();
}
inline const std::string& GetTokenReq::passwd() const {
  // @@protoc_insertion_point(field_get:verify.GetTokenReq.passwd)
  return _internal_passwd();
}
inline void GetTokenReq::set_passwd(const std::string& value) {
  _internal_set_passwd(value);
  // @@protoc_insertion_point(field_set:verify.GetTokenReq.passwd)
}
inline std::string* GetTokenReq::mutable_passwd() {
  // @@protoc_insertion_point(field_mutable:verify.GetTokenReq.passwd)
  return _internal_mutable_passwd();
}
inline const std::string& GetTokenReq::_internal_passwd() const {
  return passwd_.Get();
}
inline void GetTokenReq::_internal_set_passwd(const std::string& value) {
  
  passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTokenReq::set_passwd(std::string&& value) {
  
  passwd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:verify.GetTokenReq.passwd)
}
inline void GetTokenReq::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:verify.GetTokenReq.passwd)
}
inline void GetTokenReq::set_passwd(const char* value,
    size_t size) {
  
  passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:verify.GetTokenReq.passwd)
}
inline std::string* GetTokenReq::_internal_mutable_passwd() {
  
  return passwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTokenReq::release_passwd() {
  // @@protoc_insertion_point(field_release:verify.GetTokenReq.passwd)
  return passwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTokenReq::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:verify.GetTokenReq.passwd)
}

// -------------------------------------------------------------------

// GetTokenAck

// bool is_ok = 1;
inline void GetTokenAck::clear_is_ok() {
  is_ok_ = false;
}
inline bool GetTokenAck::_internal_is_ok() const {
  return is_ok_;
}
inline bool GetTokenAck::is_ok() const {
  // @@protoc_insertion_point(field_get:verify.GetTokenAck.is_ok)
  return _internal_is_ok();
}
inline void GetTokenAck::_internal_set_is_ok(bool value) {
  
  is_ok_ = value;
}
inline void GetTokenAck::set_is_ok(bool value) {
  _internal_set_is_ok(value);
  // @@protoc_insertion_point(field_set:verify.GetTokenAck.is_ok)
}

// string token = 2;
inline void GetTokenAck::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& GetTokenAck::token() const {
  // @@protoc_insertion_point(field_get:verify.GetTokenAck.token)
  return _internal_token();
}
inline void GetTokenAck::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:verify.GetTokenAck.token)
}
inline std::string* GetTokenAck::mutable_token() {
  // @@protoc_insertion_point(field_mutable:verify.GetTokenAck.token)
  return _internal_mutable_token();
}
inline const std::string& GetTokenAck::_internal_token() const {
  return token_.Get();
}
inline void GetTokenAck::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTokenAck::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:verify.GetTokenAck.token)
}
inline void GetTokenAck::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:verify.GetTokenAck.token)
}
inline void GetTokenAck::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:verify.GetTokenAck.token)
}
inline std::string* GetTokenAck::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTokenAck::release_token() {
  // @@protoc_insertion_point(field_release:verify.GetTokenAck.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTokenAck::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:verify.GetTokenAck.token)
}

// -------------------------------------------------------------------

// LoginReq

// string token = 1;
inline void LoginReq::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& LoginReq::token() const {
  // @@protoc_insertion_point(field_get:verify.LoginReq.token)
  return _internal_token();
}
inline void LoginReq::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:verify.LoginReq.token)
}
inline std::string* LoginReq::mutable_token() {
  // @@protoc_insertion_point(field_mutable:verify.LoginReq.token)
  return _internal_mutable_token();
}
inline const std::string& LoginReq::_internal_token() const {
  return token_.Get();
}
inline void LoginReq::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginReq::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:verify.LoginReq.token)
}
inline void LoginReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:verify.LoginReq.token)
}
inline void LoginReq::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:verify.LoginReq.token)
}
inline std::string* LoginReq::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginReq::release_token() {
  // @@protoc_insertion_point(field_release:verify.LoginReq.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginReq::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:verify.LoginReq.token)
}

// -------------------------------------------------------------------

// LoginAck

// bool is_ok = 1;
inline void LoginAck::clear_is_ok() {
  is_ok_ = false;
}
inline bool LoginAck::_internal_is_ok() const {
  return is_ok_;
}
inline bool LoginAck::is_ok() const {
  // @@protoc_insertion_point(field_get:verify.LoginAck.is_ok)
  return _internal_is_ok();
}
inline void LoginAck::_internal_set_is_ok(bool value) {
  
  is_ok_ = value;
}
inline void LoginAck::set_is_ok(bool value) {
  _internal_set_is_ok(value);
  // @@protoc_insertion_point(field_set:verify.LoginAck.is_ok)
}

// -------------------------------------------------------------------

// VerifyReq

// string token = 1;
inline void VerifyReq::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& VerifyReq::token() const {
  // @@protoc_insertion_point(field_get:verify.VerifyReq.token)
  return _internal_token();
}
inline void VerifyReq::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:verify.VerifyReq.token)
}
inline std::string* VerifyReq::mutable_token() {
  // @@protoc_insertion_point(field_mutable:verify.VerifyReq.token)
  return _internal_mutable_token();
}
inline const std::string& VerifyReq::_internal_token() const {
  return token_.Get();
}
inline void VerifyReq::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VerifyReq::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:verify.VerifyReq.token)
}
inline void VerifyReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:verify.VerifyReq.token)
}
inline void VerifyReq::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:verify.VerifyReq.token)
}
inline std::string* VerifyReq::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VerifyReq::release_token() {
  // @@protoc_insertion_point(field_release:verify.VerifyReq.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VerifyReq::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:verify.VerifyReq.token)
}

// -------------------------------------------------------------------

// VerifyAck

// bool is_ok = 1;
inline void VerifyAck::clear_is_ok() {
  is_ok_ = false;
}
inline bool VerifyAck::_internal_is_ok() const {
  return is_ok_;
}
inline bool VerifyAck::is_ok() const {
  // @@protoc_insertion_point(field_get:verify.VerifyAck.is_ok)
  return _internal_is_ok();
}
inline void VerifyAck::_internal_set_is_ok(bool value) {
  
  is_ok_ = value;
}
inline void VerifyAck::set_is_ok(bool value) {
  _internal_set_is_ok(value);
  // @@protoc_insertion_point(field_set:verify.VerifyAck.is_ok)
}

// string token = 2;
inline void VerifyAck::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& VerifyAck::token() const {
  // @@protoc_insertion_point(field_get:verify.VerifyAck.token)
  return _internal_token();
}
inline void VerifyAck::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:verify.VerifyAck.token)
}
inline std::string* VerifyAck::mutable_token() {
  // @@protoc_insertion_point(field_mutable:verify.VerifyAck.token)
  return _internal_mutable_token();
}
inline const std::string& VerifyAck::_internal_token() const {
  return token_.Get();
}
inline void VerifyAck::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VerifyAck::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:verify.VerifyAck.token)
}
inline void VerifyAck::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:verify.VerifyAck.token)
}
inline void VerifyAck::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:verify.VerifyAck.token)
}
inline std::string* VerifyAck::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VerifyAck::release_token() {
  // @@protoc_insertion_point(field_release:verify.VerifyAck.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VerifyAck::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:verify.VerifyAck.token)
}

// -------------------------------------------------------------------

// QuitReq

// -------------------------------------------------------------------

// QuitAck

// bool is_ok = 1;
inline void QuitAck::clear_is_ok() {
  is_ok_ = false;
}
inline bool QuitAck::_internal_is_ok() const {
  return is_ok_;
}
inline bool QuitAck::is_ok() const {
  // @@protoc_insertion_point(field_get:verify.QuitAck.is_ok)
  return _internal_is_ok();
}
inline void QuitAck::_internal_set_is_ok(bool value) {
  
  is_ok_ = value;
}
inline void QuitAck::set_is_ok(bool value) {
  _internal_set_is_ok(value);
  // @@protoc_insertion_point(field_set:verify.QuitAck.is_ok)
}

// string err_info = 2;
inline void QuitAck::clear_err_info() {
  err_info_.ClearToEmpty();
}
inline const std::string& QuitAck::err_info() const {
  // @@protoc_insertion_point(field_get:verify.QuitAck.err_info)
  return _internal_err_info();
}
inline void QuitAck::set_err_info(const std::string& value) {
  _internal_set_err_info(value);
  // @@protoc_insertion_point(field_set:verify.QuitAck.err_info)
}
inline std::string* QuitAck::mutable_err_info() {
  // @@protoc_insertion_point(field_mutable:verify.QuitAck.err_info)
  return _internal_mutable_err_info();
}
inline const std::string& QuitAck::_internal_err_info() const {
  return err_info_.Get();
}
inline void QuitAck::_internal_set_err_info(const std::string& value) {
  
  err_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QuitAck::set_err_info(std::string&& value) {
  
  err_info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:verify.QuitAck.err_info)
}
inline void QuitAck::set_err_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:verify.QuitAck.err_info)
}
inline void QuitAck::set_err_info(const char* value,
    size_t size) {
  
  err_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:verify.QuitAck.err_info)
}
inline std::string* QuitAck::_internal_mutable_err_info() {
  
  return err_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QuitAck::release_err_info() {
  // @@protoc_insertion_point(field_release:verify.QuitAck.err_info)
  return err_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuitAck::set_allocated_err_info(std::string* err_info) {
  if (err_info != nullptr) {
    
  } else {
    
  }
  err_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:verify.QuitAck.err_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace verify

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_verify_2eproto
